int getchar(void)=reads next available character from screen and returns it as an integer
int putchar(int c)=puts the passed character on screen and returns it as an integer
char *gets(char *s)=read a line from stdin to the buffer s is pointed on
char *puts(const char *s)=writes s and a trailing newline to stdout
int scanf(const char *format, ...)=reads from stdin and scans according to format
int printf(const char *format,..)=writes to stdout according to format
type f(int, ...)=Variable Arguments: f(1) f(1,2) etc work include stdarg.h declare va_list valist and init va_start(valist ,num)
pointer\u003D&amp;variable=Store address of variable in pointer
*pointer=Acess value of pointer pointer
void *calloc(int num, int size)=Allocate an array of num elements each size many bytes wide
void free(void *address)=Release a block of memory specified by address
void *malloc(size_t size)=Allocates an array of num bytes and leave them uninitialized - always free later
void *realloc(void *address, int newsize)=Realloc memory at address extending it to newsize
struct [tag] { [type] [membername] ... }=Combine data of heterogenous type - all exist
union { [type] [membername] ... } [tag]=Combine data - only one member can exist in memory location
typedef [type] [typename]=Define a type, simple like char or complex like a struct


